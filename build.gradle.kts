/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/9.0.0/samples
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id("org.springframework.boot") version "3.3.5"
    id("io.spring.dependency-management") version "1.1.6"
    id("com.diffplug.spotless") version "6.25.0"
    id("checkstyle")
    id("net.ltgt.errorprone") version "4.0.1"
    java
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb-reactive")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    // Kafka
    implementation("org.springframework.kafka:spring-kafka")
    implementation("io.projectreactor.kafka:reactor-kafka:1.3.23")

    // Redis and Distributed Locking
    implementation("org.redisson:redisson-spring-boot-starter:3.50.0")

    // Resilience and Circuit Breaker
    implementation("io.github.resilience4j:resilience4j-spring-boot3:2.3.0")
    implementation("io.github.resilience4j:resilience4j-reactor:2.3.0")

    // JSON Processing
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:8.0")

    // OpenAPI/Swagger Documentation
    implementation("org.springdoc:springdoc-openapi-starter-webflux-ui:2.6.0")

    // Test Dependencies
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.kafka:spring-kafka-test")
    testImplementation("io.projectreactor:reactor-test")

    // TestContainers
    testImplementation("org.testcontainers:junit-jupiter:1.19.8")
    testImplementation("org.testcontainers:kafka:1.19.8")
    testImplementation("org.testcontainers:mongodb:1.19.8")
    testImplementation("org.testcontainers:testcontainers:1.19.8")

    // Mockito and AssertJ
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.assertj:assertj-core")

    // Error Prone
    errorprone("com.google.errorprone:error_prone_core:2.28.0")
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
}

tasks.withType<Test> {
    useJUnitPlatform()
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.bootJar {
    archiveFileName.set("order-worker.jar")
}

// =============================================================================
// CODE QUALITY CONFIGURATION
// =============================================================================

// Spotless Configuration
spotless {
    java {
        target("src/**/*.java")

        // Use Google Java Format
        googleJavaFormat("1.22.0").aosp().reflowLongStrings()

        // Import order
        importOrder("java", "javax", "org", "com", "")

        // Remove unused imports
        removeUnusedImports()

        // Format annotations
        formatAnnotations()

        // Add license header
        licenseHeader(
            """
            /*
             * Copyright (c) 2025 Resilient Order Enricher
             *
             * Licensed under the MIT License.
             */
            """.trimIndent(),
        )

        // Custom rules
        trimTrailingWhitespace()
        endWithNewline()
    }

    kotlinGradle {
        target("*.gradle.kts")
        ktlint()
    }
}

// Checkstyle Configuration
checkstyle {
    toolVersion = "10.12.7"
    configFile = file("config/checkstyle/checkstyle.xml")
    configDirectory = file("config/checkstyle")
    isIgnoreFailures = false
    maxWarnings = 0
}

tasks.withType<Checkstyle> {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

// Error Prone Configuration (Simplified for compatibility)
tasks.withType<JavaCompile>().configureEach {
    // Error Prone will be enabled through the errorprone dependencies
    // but we'll keep the configuration minimal to avoid compatibility issues
}
