version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - order-worker-net

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    ports: ["9092:9092"]
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - order-worker-net

  mongo:
    image: mongo:8.0
    ports: ["27017:27017"]
    environment:
      MONGO_INITDB_DATABASE: order_worker
    volumes:
      - mongo_data:/data/db
    networks:
      - order-worker-net

  redis:
    image: redis:7.2-alpine
    ports: ["6380:6379"]
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - order-worker-net

  enricher-api:
    build: ./services/enricher-api-go
    ports: ["8090:8080"]
    depends_on:
      - kafka
      - mongo
      - redis
    networks:
      - order-worker-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/products/test"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-worker:
    build: .
    ports: ["8081:8081"]
    depends_on:
      - kafka
      - mongo
      - redis
      - enricher-api
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      MONGODB_URI: mongodb://mongo:27017
      MONGODB_DATABASE: order_worker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ENRICHER_API_BASE_URL: http://enricher-api:8080
      LOG_LEVEL: INFO
    networks:
      - order-worker-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  order-worker-net:
    driver: bridge

volumes:
  mongo_data:
  redis_data:
